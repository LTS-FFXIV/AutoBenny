using Dalamud.Game.ClientState;
using Dalamud.Game.ClientState.Actors.Types;
using Dalamud.Game.ClientState.Party;
using Dalamud.Game.Command;
using Dalamud.Game.Framework;
using Dalamud.Plugin;
using System;
using System.Linq;

namespace AutoBenniPlugin
{
    public class AutoBenni : IDalamudPlugin
    {
        private const int BenedictionActionId = 140;

        private DalamudPluginInterface pi;
        private ClientState clientState;
        private Framework framework;
        private PartyList partyList;
        private int healthThreshold = 0;

        public string Name => "AutoBenni";

        public void Initialize(DalamudPluginInterface pluginInterface)
        {
            pi = pluginInterface;
            clientState = pluginInterface.ClientState;
            framework = pluginInterface.Framework;
            partyList = pluginInterface.ClientState.PartyList;

            framework.Update += OnUpdateEvent;
            pi.CommandManager.AddHandler("/benny", new CommandInfo(OnBennyCommand)
            {
                HelpMessage = "Set the health threshold percentage for Benediction. Usage: /benny <percentage>",
                ShowInHelp = true
            });
        }

        private void OnBennyCommand(string command, string args)
        {
            if (int.TryParse(args, out int newThreshold) && newThreshold >= 0 && newThreshold <= 100)
            {
                healthThreshold = newThreshold;
                pi.Framework.Gui.Chat.Print($"Health threshold for Benediction set to {healthThreshold}%.");
            }
            else
            {
                pi.Framework.Gui.Chat.Print("Invalid argument. Usage: /benny <percentage>");
            }
        }

        private void OnUpdateEvent(Framework framework)
        {
            if (!clientState.IsLoggedIn || clientState.LocalPlayer == null || clientState.LocalPlayer.ClassJob.Id != 24)
            {
                return;
            }

            var target = partyList
                .Where(member => member.ObjectId != clientState.LocalPlayer.ObjectId)
                .Select(member => pi.ClientState.Actors.GetActorByObjectId(member.ObjectId))
                .OfType<PlayerCharacter>()
                .FirstOrDefault(member => (float)member.CurrentHp / member.MaxHp * 100 <= healthThreshold);

            if (target != null)
            {
                CastBenediction(clientState.LocalPlayer.ObjectId, target.ObjectId);
            }
        }

        private void CastBenediction(uint sourceId, uint targetId)
        {
            pi.Framework.Gui.Chat.Print($"Casting Benediction on {targetId}");
            // Perform the action by sending a command to the game chat
            pi.CommandManager.ProcessCommand($"/ac \"Benediction\" <{targetId}>");
        }

        public void Dispose()
        {
            framework.Update -= OnUpdateEvent;
            pi.CommandManager.RemoveHandler("/benny");
            pi.Dispose();
        }
    }
}
