using System;
using System.Text;
using System.Threading.Tasks;
using Dalamud.Configuration;
using Dalamud.Game;
using Dalamud.Game.ClientState.Objects.Types;
using Dalamud.Game.Command;
using Dalamud.Plugin;

namespace AutoBenny
{
    public class AutoBennyPlugin : IDalamudPlugin
    {
        private DalamudPluginInterface pluginInterface;
        private PluginConfiguration config;
        private bool isBenedictionOnCooldown = false;
        private bool isEnabled = true;

        public string Name => "Auto Benny Plugin";

        public void Initialize(DalamudPluginInterface pluginInterface)
        {
            this.pluginInterface = pluginInterface;
            this.config = this.pluginInterface.GetPluginConfig() as PluginConfiguration ?? new PluginConfiguration();
            pluginInterface.Framework.OnUpdateEvent += OnUpdate;

            this.pluginInterface.CommandManager.AddHandler("/benny", new CommandInfo(OnTogglePlugin)
            {
                HelpMessage = "Toggle Auto Benny Plugin."
            });

            this.pluginInterface.CommandManager.AddHandler("/bennyhealth", new CommandInfo(OnSetHealthThreshold)
            {
                HelpMessage = "Set the health threshold for Auto Benny. Usage: /bennyhealth <value>"
            });
        }

        private void OnTogglePlugin(string command, string arguments)
        {
            isEnabled = !isEnabled;
            this.pluginInterface.Framework.Gui.Chat.Print($"Auto Benny is now {(isEnabled ? "enabled" : "disabled")}.");
        }

        private void OnSetHealthThreshold(string command, string arguments)
        {
            if (int.TryParse(arguments, out int threshold) && threshold >= 0 && threshold <= 100)
            {
                config.HealthThreshold = threshold / 100f;
                config.Save();
                this.pluginInterface.Framework.Gui.Chat.Print($"Health threshold for Auto Benny set to {threshold}%.");
            }
            else
            {
                StringBuilder sb = new StringBuilder();
                sb.AppendFormat("Invalid input. Usage: {0} <value>", command);
                sb.AppendLine();
                sb.Append("Value must be between 0 and 100.");
                this.pluginInterface.Framework.Gui.Chat.PrintError(sb.ToString());
            }
        }

        private async void OnUpdate(Framework framework)
        {
            if (isBenedictionOnCooldown || !isEnabled)
            {
                return;
            }

            var partyList = this.pluginInterface.ClientState.PartyList;

            foreach (var member in partyList)
            {
                var character = member.GameObject as Character;

                if (character == null)
                    continue;

                float healthPercentage = (float)character.CurrentHp / character.MaxHp;

                if (healthPercentage < config.HealthThreshold)
                {
                    CastBenediction(character);
                    
                    isBenedictionOnCooldown = true;
                    await Task.Delay(180000);
                    isBenedictionOnCooldown = false;
                }
            }
        }

        private void CastBenediction(Character target)
        {
            string command = $"/ac \"Benediction\" <{target.ObjectId}>";
            this.pluginInterface.CommandManager.ProcessCommand(command);
        }

        public void Dispose()
        {
            pluginInterface.Framework.OnUpdateEvent -= OnUpdate;
            pluginInterface.CommandManager.RemoveHandler("/benny");
            pluginInterface.CommandManager.RemoveHandler("/bennyhealth");
            pluginInterface.Dispose();
        }
    }

    public class PluginConfiguration : IPluginConfiguration
    {
        public int Version { get; set; } = 1;
        public float HealthThreshold { get; set; } = 0.2f;

        public void Save()
        {
            // Replace with the proper plugin name and version
            AutoBennyPluginInterface.SavePluginConfig(this);
        }
    }
